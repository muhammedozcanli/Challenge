// <auto-generated />
using System;
using Challenge.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Challenge.Persistence.Migrations
{
    [DbContext(typeof(ChallengeDBContext))]
    partial class ChallengeDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Challenge.Persistence.Entities.Balance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long?>("AvailableBalance")
                        .HasColumnType("bigint");

                    b.Property<long?>("BlockedBalance")
                        .HasColumnType("bigint");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Balances");

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-aaaa-bbbb-cccc-111111111111"),
                            AvailableBalance = 10000000000L,
                            BlockedBalance = 0L,
                            Currency = "USD",
                            UserId = new Guid("550e8400-e29b-41d4-a716-446655440000")
                        },
                        new
                        {
                            Id = new Guid("3c0e8f1b-1d48-4e72-88b9-85de4b7fcb10"),
                            AvailableBalance = 5000000000L,
                            BlockedBalance = 0L,
                            Currency = "USD",
                            UserId = new Guid("a7f3e6c5-2d9b-4c6e-9b2f-3ea893fa8c7d")
                        });
                });

            modelBuilder.Entity("Challenge.Persistence.Entities.Error", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Message")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Errors");
                });

            modelBuilder.Entity("Challenge.Persistence.Entities.PreOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("PreOrders");
                });

            modelBuilder.Entity("Challenge.Persistence.Entities.PreOrderProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PreOrderId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PreOrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("PreOrderProducts");
                });

            modelBuilder.Entity("Challenge.Persistence.Entities.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<double?>("Price")
                        .HasColumnType("double precision");

                    b.Property<int?>("Stock")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1b2c3d4-e5f6-4111-aaaa-111111111111"),
                            Category = "Electronics",
                            Currency = "USD",
                            Description = "Latest model with advanced features",
                            Name = "Premium Smartphone",
                            Price = 19.989999999999998,
                            Stock = 42
                        },
                        new
                        {
                            Id = new Guid("b2c3d4e5-f6a7-4222-bbbb-222222222222"),
                            Category = "Electronics",
                            Currency = "USD",
                            Description = "Noise-cancelling with premium sound quality",
                            Name = "Wireless Headphones",
                            Price = 14.99,
                            Stock = 78
                        },
                        new
                        {
                            Id = new Guid("c3d4e5f6-a7b8-4333-cccc-333333333333"),
                            Category = "Electronics",
                            Currency = "USD",
                            Description = "Fitness tracking and notifications",
                            Name = "Smart Watch",
                            Price = 12.99,
                            Stock = 0
                        },
                        new
                        {
                            Id = new Guid("d4e5f6a7-b8c9-4444-dddd-444444444444"),
                            Category = "Electronics",
                            Currency = "USD",
                            Description = "High-performance for work and gaming",
                            Name = "Laptop",
                            Price = 19.989999999999998,
                            Stock = 15
                        },
                        new
                        {
                            Id = new Guid("e5f6a7b8-c9d0-4555-eeee-555555555555"),
                            Category = "Accessories",
                            Currency = "USD",
                            Description = "Fast charging for compatible devices",
                            Name = "Wireless Charger",
                            Price = 9.9900000000000002,
                            Stock = 120
                        });
                });

            modelBuilder.Entity("Challenge.Persistence.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = new Guid("550e8400-e29b-41d4-a716-446655440000"),
                            FirstName = "Test",
                            Password = "a4ayc/80/OGda4BO/1o/V0etpOqiLx1JwB5S3beHW0s="
                        },
                        new
                        {
                            Id = new Guid("a7f3e6c5-2d9b-4c6e-9b2f-3ea893fa8c7d"),
                            FirstName = "User",
                            Password = "a4ayc/80/OGda4BO/1o/V0etpOqiLx1JwB5S3beHW0s="
                        });
                });

            modelBuilder.Entity("Challenge.Persistence.Entities.Balance", b =>
                {
                    b.HasOne("Challenge.Persistence.Entities.User", "User")
                        .WithOne("Balance")
                        .HasForeignKey("Challenge.Persistence.Entities.Balance", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Challenge.Persistence.Entities.PreOrder", b =>
                {
                    b.HasOne("Challenge.Persistence.Entities.User", "User")
                        .WithMany("PreOrders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Challenge.Persistence.Entities.PreOrderProduct", b =>
                {
                    b.HasOne("Challenge.Persistence.Entities.PreOrder", "PreOrder")
                        .WithMany("PreOrderProducts")
                        .HasForeignKey("PreOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Challenge.Persistence.Entities.Product", "Product")
                        .WithMany("PreOrderProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PreOrder");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Challenge.Persistence.Entities.PreOrder", b =>
                {
                    b.Navigation("PreOrderProducts");
                });

            modelBuilder.Entity("Challenge.Persistence.Entities.Product", b =>
                {
                    b.Navigation("PreOrderProducts");
                });

            modelBuilder.Entity("Challenge.Persistence.Entities.User", b =>
                {
                    b.Navigation("Balance")
                        .IsRequired();

                    b.Navigation("PreOrders");
                });
#pragma warning restore 612, 618
        }
    }
}
